<%= render 'layouts/header' %>
<div class="container">
 <div class="expository" >
  <div class="span2"> </div>
  <div class ="span10">
   <p> This project began as a follow on exercise after I took the summer of 2012
    to complete the
    <a href="http://www.railstutorial.org">Ruby on Rails Tutorial</a>
     by Michael Hartl.   I had given Rails a shot several years ago, and gave 
     up after I loaded a database with my book library, got a basic scaffolded
     website up, and then couldn't do anything with it that I wanted to.</p> 
 
     <p> My interest revived when I came across the 
     <a  href="http://getontracks.org">Tracks project</a>
     Tracks project, which implemented the "Getting Things
     Done" method of task management.   I liked the application (and still do), 
     but I wanted to tweak it a little, and my desire to do that led me back to 
     Rails for another  shot.   As I investigated the technology a little, I realized 
     that I really liked Ruby as a language.   I had been scripting in Perl for
     awhile, and I have  been trained in Java, and Ruby seemed to me to fill the gap
     between the two languages -
     not as formal as Java, but object oriented; and not as quirky as Perl, but 
     having the same kind of philosophy of "simple thing should be simple, and hard
     things should be possible."   So I took a side trip to learn basic Ruby, 
     messing around with IRB on my Ubuntu box, and reading 
     <a href='http://www.scribd.com/doc/8545174/whys-Poignant-Guide-to-Ruby'>
     why's Poignant Guide to Ruby </a>  
      which was THE most marvelously quirky tech manual I have ever read, beating out
     Larry Walls PERL camel book by half a length.   </p> 
 
    <p> The next part of my discovery went to
     <a href='http://www.codeschool.com/'>Code School's </a>
     <a href='http://www.codeschool.com/courses/rails-for-zombies'>  
       Rails for Zombies</a>.
     I am not crazy about videos in general - I can read much faster that I can watch -
     but this was well put together, and even though Greg insisted on pronouncing
     attributes as "a-TRI-butes" like the verb instead of "AT-tributes" the noun, 
     I found it well worth my time. </p> 
     
     <p>  But it was Hartl's book that really helped me put all the pieces together.  
     As a learning tool, it had a great grasp of just how much new information 
     to add at a time, without throwing too much jargon all at once.    I loved its
     emphasis on Test Driven Design, and I found zero errors in the example code, even
     though I keyed in every line manually, rather that cut and pasted.   (I found that the 
     exercise of keying in made me focus on each line of code and increased the depth of
     my learning).   If I had a critique of the book, it would be the 
     missing piece on exception handling (this might be me shoehorning my Java experience 
     into the Ruby paradigm) and the lack of an index in the online version 
     (perhaps the publish version will have it).   Having said that,  I highly recommend it
     and if Michael ever finds himself in Minneapolis/St Paul I would gladly by him that 
     beer mentioned in the licence. 
     </p> 
  </div>
 </div>
</div>
