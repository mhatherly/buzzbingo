THIS FILE IS FOR LOGGING WHAT I HAVE DONE SO I CAN KEEP TRACK OF IT FOR THIS APP

IT WILL BE PUSHED UP TO GITHUB so nothing confidential should be placed here

Initial setup
used rails new  with no test per chapter 3 of RailsTutorial (aka RlTl)

used gitignore and GEMFILE from RlTL 

for GEMFILE added Steak, removed cucumber.   
then ran bundle install --without production

Ran rspec:install (don't know if that messes up steak._ 
Set up repository in GitHub and pushed to it

used a README file in rdoc style not in md style contrary to RlTl. 
 commit and push
create a heroku app
result: 
http://secret-atoll-3156.herokuapp.com/ | git@heroku.com:secret-atoll-3156.git

tried to push but jquery rails 2.0.0 crapped out - need to update gem file
changed jquery version to ~>2.0.2
commit and push again
that worked on the heroku push - we are now in business.   Time to write some 
steak specs.

9/24 
git co -b "steak-tests-drafts"

rails generate steak --capybara
no Go need this first i think
rails generate steak:install
  reult is : 
  generate  rspec:install
   identical  .rspec
       exist  spec
   identical  spec/spec_helper.rb
      create  spec/acceptance
      create  spec/acceptance/acceptance_helper.rb
      create  spec/acceptance/support/helpers.rb
      create  spec/acceptance/support/paths.rb

rails generate steak:spec bingo 

  result: 
    rails generate steak:spec bingo
    
 bundle exec rspec -f d specs/acceptance/ 
 
     result: 
     
        Bingo 
          In order to ...
          As a ...
          I want ...
          first scenario
        
        Finished in 0.08457 seconds
        1 example, 0 failures
        
I don't like this - would rather have a pending status like standard rspec
so i added pending in the scenario and copied it to a template in the same
directory, so i can use it for all specs.  

Now it runs twice but that is OK.  I changed it to read only to avoid accidental update

messing with getting a test to run and give something back - 
used the helper method in acceptance/support/helpers.rb
and just the default page so I can get through to get some sort of result.

This code works, but I am not sure what it buys me.    And I am green enough 
at rspec that I am confusing them - the fact that there is so litte doc on
steak makes my decision to abandon this line and stick  to rspec.

now to figure out how to remove a gem from bundle....
should be pretty simple under R3 - just change the GEMFILE and bundle install.   

But first i added in the prevous thoughts that I had placed in dropbox into mh notes
then I do the commit 

After bundle install some stuff still works in the acceptance.  But I should move this to spec directory

after running through railscast on how I test, I tried to run
rails generate integration_test help_page which generated a page
called spec/requests/help_pages_spec.rb 

good enough we will work with this dir for awhile
but lets do the home page first

wrote a bunch of pending specs for the home page but failed at visit root_path since I have 
no routes or controllers.    

so lets at least get the home page answering

rails generate controller home --no-test-framework --no-assets --no-helper
figured out the -p option for "pretend" - think dry-run is useful for 
 figuring what gets created,
RESULT 
create  app/controllers/home_controller.rb
      invoke  erb
      create    app/views/home  - that is a dir.
tried to run tests, but got root_path note found
created at app/views/home/home.html file and now works online but tests 
still fail with root_path not found

tried adding in some includes from rspec and capybara into the rspec, and still getting
a failure - now we find root_path but can't find visit method.    For some reason
those pieces are not getting included in the requests directory like the
doc says they should.    

OK - the goofy behavior was fixed by using a 
before blokc to wrap the visit page
putting subject page first
adding an it should after each describe.    

I removed the includes I was messing with and it was still working

9/28 I am thinking that I can remove the before block and put the visit in the describe.  
no - i need an each before for each test.

OK I have got the first test executing properly (testing for logo) and then I got
the page passing the test.   I had to use page rather than it inside the test, 
because I used a description with the it see the spec for more detail.

I added the logo into app/assets images  and added the ruby command to render the image
right now, the image has no styling and is not centered.  I should also probably block around the
image with the same color to deal with the browser size problem.    

I also should add in the IE9 shim per hartl but first lets deal with the other peices
 This code passes 
 it "has background behind the logo that matches" do
         should { pending("logo color match") }
       end
when it should be pending
but  this code correctly gives pending:
 describe "has a narrative"  do
      it should { pending("intro to app")}
    end
 but first deal with the center logo because I am not matching   
 
 OK  here is what I found out 
  # capybara cannot detect style elements - unless they are inline the html 
  I can use xpath to correctly detect the image source otherwise I just find an image
  This code works 
  it "has a logo" do 
        page.should have_xpath("//img[@src = '/assets/bblogo.png']")
      end
  Now, what happens if I break this by adding a div tag? 
    no it does not since xpath syntax is 
    // select no matter where in the doc it is 
    so we are looking for image somewhere in the doc with attribute src
  
  OK now to document how to center an image in css
  img { display: block; margin-right: auto; margin-left: auto; } 
  now try using id

 page.should have_xpath("//img[@id = 'logo', @src = '/assets/bblogo.png']")
 
 does not work on a predicate error, but the id is attached to the div tag anyway at the moment
 
added a id to the logo 
  <%= image_tag "bblogo.png", id: "logo_image" %>
  
  and change the spec according to xpath syntax 
  page.should have_xpath("//img[(@id = 'logo_image') and (@src = '/assets/bblogo.png')]")

another way to do this is to find within the division 
  page.should have_xpath("//div[@id='logo']/img") # has an image in div logo
 
 or to get really specific 
  page.should have_xpath(
           "//div[@id='logo']/img[(@id = 'logo_image') and (@src = '/assets/bblogo.png')]"
           )

So i think we are done  with finding stuff via xpath - now work on styling with 
bootstrap sass

first task is to center the logo on the top of the page, and get the background color
the same as the logo.    We open gimp to get the color code..  try 35e3c8  not a great color but one we can
live with and distinctive enough
to center an image
img { display: block;
     margin-left: auto;
     margin-right: auto;
     }

messing around with background but can't get the whole area to be that
since background color only affects the element.    

perhaps bootstap sass can help us, so I ran through a tutorial on that to get some idea 
of what I am doing 

ok I created a custom_css_scss in assets stylesheets and added the following
@import "bootstrap";

img#logo_image { display: block;
        margin-left: auto;
        margin-right: auto;
        }
this center my image, and i also put the text into a container div and 
into a hero-unit div for some styling.    

copied in the navbar from the twitter bootstrap docs and started to add things        

The hero unit with multi paragraphs looks crappy - try something else
getting better - with just span2 then span 8
navbar looks crappy - trying inverse
nogo - but I am a couple release behind in  bootstrap sass - 2.0.0 instead of 
2,1   upgraded gem file version and reinstall

No go still ignores inverse so I am trying some less code here
from http://blog.nyaruka.com/customizing-twitter-bootstraps-nav-bar-color
 but the vars are wrong - need to change to $ and then use this list
  
http://twitter.github.com/bootstrap/customize.html

after a bit ov work, I go it looking nice enough with a purple background, and 
purple navbar with yellow and gold, and a nice text.   Now back to the spec tests

title test failed because title was wrong.

Now I updated application.html.erb to give the app title.   Not sure if I want to mess 
with specfic page titles. 

10/2 updated the testing for the home page, and generated stubs for the 
static pages help and tech info.   Also added a button to finish off the 
preliminary home page.  I won't need to revisit that except to put in the link

I spent some time styling the button so it looked like the Nav bar,   
There were a few global bootstrap vars I could play with, but mostly I
went with some specific styling.   The hover was a little tricky but I found 
a less refrence that seemed to do it using &:hover {}    I used firebug to figure out the 
navbar styling and copied that into the button.     It looks good. 

I will leave the help page for last.  But I will update the tech page so I
can start to use partials for some of the duplicates, now that my home page
passes my spec tests.   That way when I refactor, I can find any issues. 

NOTE: COME BACK HERE LATER - Possible Refactor:  I have one directory per page.  It started when 
I did the generate controller.   I have been following that convention for adding the
dummy pages, but  I think I want to bring it back to views dir.     

So next is to write the spec for the tech info page
and to do that I need to figure out how to factor out the standard page tests
since I want a separate file per page.  


OK figured out the shared examples - placing in the spec support direcotry
with a shared_example_for method, and then adding
behaves_like_a "Standard Web Page" in the spec.


Started to work on the tech page by factoring the header as a partial
then wrote some pending specs for the links I wanted
thens started a narrative that ended up as an essay - need to simplfy.

So I merged the branch back in after renaming the branch
git branch -m oldname newname

and pushed to heroku, but it does not like due to thin error

heroku logs 
was the command I used to figure it out. 

after a bit of dinking around with the gem file (and forgetting to run 
bundle install, I got it to work on Heroku.

I do realize I don't have a link to the home page, so I can't get back except 
with the button, so I need to add that to the navbar and to the tests.

Done.

 

