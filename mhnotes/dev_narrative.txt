THIS FILE IS FOR LOGGING WHAT I HAVE DONE SO I CAN KEEP TRACK OF IT FOR THIS APP

IT WILL BE PUSHED UP TO GITHUB so nothing confidential should be placed here

Initial setup
used rails new  with no test per chapter 3 of RailsTutorial (aka RlTl)

used gitignore and GEMFILE from RlTL 

for GEMFILE added Steak, removed cucumber.   
then ran bundle install --without production

Ran rspec:install (don't know if that messes up steak._ 
Set up repository in GitHub and pushed to it

used a README file in rdoc style not in md style contrary to RlTl. 
 commit and push
create a heroku app
result: 
http://secret-atoll-3156.herokuapp.com/ | git@heroku.com:secret-atoll-3156.git

tried to push but jquery rails 2.0.0 crapped out - need to update gem file
changed jquery version to ~>2.0.2
commit and push again
that worked on the heroku push - we are now in business.   Time to write some 
steak specs.

9/24 
git co -b "steak-tests-drafts"

rails generate steak --capybara
no Go need this first i think
rails generate steak:install
  reult is : 
  generate  rspec:install
   identical  .rspec
       exist  spec
   identical  spec/spec_helper.rb
      create  spec/acceptance
      create  spec/acceptance/acceptance_helper.rb
      create  spec/acceptance/support/helpers.rb
      create  spec/acceptance/support/paths.rb

rails generate steak:spec bingo 

  result: 
    rails generate steak:spec bingo
    
 bundle exec rspec -f d specs/acceptance/ 
 
     result: 
     
        Bingo 
          In order to ...
          As a ...
          I want ...
          first scenario
        
        Finished in 0.08457 seconds
        1 example, 0 failures
        
I don't like this - would rather have a pending status like standard rspec
so i added pending in the scenario and copied it to a template in the same
directory, so i can use it for all specs.  

Now it runs twice but that is OK.  I changed it to read only to avoid accidental update

messing with getting a test to run and give something back - 
used the helper method in acceptance/support/helpers.rb
and just the default page so I can get through to get some sort of result.

This code works, but I am not sure what it buys me.    And I am green enough 
at rspec that I am confusing them - the fact that there is so litte doc on
steak makes my decision to abandon this line and stick  to rspec.

now to figure out how to remove a gem from bundle....
should be pretty simple under R3 - just change the GEMFILE and bundle install.   

But first i added in the prevous thoughts that I had placed in dropbox into mh notes
then I do the commit 

After bundle install some stuff still works in the acceptance.  But I should move this to spec directory

after running through railscast on how I test, I tried to run
rails generate integration_test help_page which generated a page
called spec/requests/help_pages_spec.rb 

good enough we will work with this dir for awhile
but lets do the home page first

wrote a bunch of pending specs for the home page but failed at visit root_path since I have 
no routes or controllers.    

so lets at least get the home page answering

rails generate controller home --no-test-framework --no-assets --no-helper
figured out the -p option for "pretend" - think dry-run is useful for 
 figuring what gets created,
RESULT 
create  app/controllers/home_controller.rb
      invoke  erb
      create    app/views/home  - that is a dir.
tried to run tests, but got root_path note found
created at app/views/home/home.html file and now works online but tests 
still fail with root_path not found

tried adding in some includes from rspec and capybara into the rspec, and still getting
a failure - now we find root_path but can't find visit method.    For some reason
those pieces are not getting included in the requests directory like the
doc says they should.    

OK - the goofy behavior was fixed by using a 
before blokc to wrap the visit page
putting subject page first
adding an it should after each describe.    

I removed the includes I was messing with and it was still working

9/28 I am thinking that I can remove the before block and put the visit in the describe.  
no - i need an each before for each test.

OK I have got the first test executing properly (testing for logo) and then I got
the page passing the test.   I had to use page rather than it inside the test, 
because I used a description with the it see the spec for more detail.

I added the logo into app/assets images  and added the ruby command to render the image
right now, the image has no styling and is not centered.  I should also probably block around the
image with the same color to deal with the browser size problem.    

I also should add in the IE9 shim per hartl but first lets deal with the other peices
 This code passes 
 it "has background behind the logo that matches" do
         should { pending("logo color match") }
       end
when it should be pending
but  this code correctly gives pending:
 describe "has a narrative"  do
      it should { pending("intro to app")}
    end
 but first deal with the center logo because I am not matching   
 
 OK  here is what I found out 
  # capybara cannot detect style elements - unless they are inline the html 
  I can use xpath to correctly detect the image source otherwise I just find an image
  This code works 
  it "has a logo" do 
        page.should have_xpath("//img[@src = '/assets/bblogo.png']")
      end
  Now, what happens if I break this by adding a div tag? 
    no it does not since xpath syntax is 
    // select no matter where in the doc it is 
    so we are looking for image somewhere in the doc with attribute src
  
  OK now to document how to center an image in css
  img { display: block; margin-right: auto; margin-left: auto; } 
  now try using id

 page.should have_xpath("//img[@id = 'logo', @src = '/assets/bblogo.png']")
 
 does not work on a predicate error, but the id is attached to the div tag anyway at the moment
 
added a id to the logo 
  <%= image_tag "bblogo.png", id: "logo_image" %>
  
  and change the spec according to xpath syntax 
  page.should have_xpath("//img[(@id = 'logo_image') and (@src = '/assets/bblogo.png')]")

another way to do this is to find within the division 
  page.should have_xpath("//div[@id='logo']/img") # has an image in div logo
 
 or to get really specific 
  page.should have_xpath(
           "//div[@id='logo']/img[(@id = 'logo_image') and (@src = '/assets/bblogo.png')]"
           )

So i think we are done  with finding stuff via xpath - now work on styling with 
bootstrap sass

first task is to center the logo on the top of the page, and get the background color
the same as the logo.    We open gimp to get the color code..  try 35e3c8  not a great color but one we can
live with and distinctive enough
to center an image
img { display: block;
     margin-left: auto;
     margin-right: auto;
     }

messing around with background but can't get the whole area to be that
since background color only affects the element.    

perhaps bootstap sass can help us, so I ran through a tutorial on that to get some idea 
of what I am doing 

ok I created a custom_css_scss in assets stylesheets and added the following
@import "bootstrap";

img#logo_image { display: block;
        margin-left: auto;
        margin-right: auto;
        }
this center my image, and i also put the text into a container div and 
into a hero-unit div for some styling.    

copied in the navbar from the twitter bootstrap docs and started to add things        

The hero unit with multi paragraphs looks crappy - try something else
getting better - with just span2 then span 8
navbar looks crappy - trying inverse
nogo - but I am a couple release behind in  bootstrap sass - 2.0.0 instead of 
2,1   upgraded gem file version and reinstall

No go still ignores inverse so I am trying some less code here
from http://blog.nyaruka.com/customizing-twitter-bootstraps-nav-bar-color
 but the vars are wrong - need to change to $ and then use this list
  
http://twitter.github.com/bootstrap/customize.html

after a bit ov work, I go it looking nice enough with a purple background, and 
purple navbar with yellow and gold, and a nice text.   Now back to the spec tests

title test failed because title was wrong.

Now I updated application.html.erb to give the app title.   Not sure if I want to mess 
with specfic page titles. 

10/2 updated the testing for the home page, and generated stubs for the 
static pages help and tech info.   Also added a button to finish off the 
preliminary home page.  I won't need to revisit that except to put in the link

I spent some time styling the button so it looked like the Nav bar,   
There were a few global bootstrap vars I could play with, but mostly I
went with some specific styling.   The hover was a little tricky but I found 
a less refrence that seemed to do it using &:hover {}    I used firebug to figure out the 
navbar styling and copied that into the button.     It looks good. 

I will leave the help page for last.  But I will update the tech page so I
can start to use partials for some of the duplicates, now that my home page
passes my spec tests.   That way when I refactor, I can find any issues. 

NOTE: COME BACK HERE LATER - Possible Refactor:  I have one directory per page.  It started when 
I did the generate controller.   I have been following that convention for adding the
dummy pages, but  I think I want to bring it back to views dir.     

So next is to write the spec for the tech info page
and to do that I need to figure out how to factor out the standard page tests
since I want a separate file per page.  


OK figured out the shared examples - placing in the spec support direcotry
with a shared_example_for method, and then adding
behaves_like_a "Standard Web Page" in the spec.


Started to work on the tech page by factoring the header as a partial
then wrote some pending specs for the links I wanted
thens started a narrative that ended up as an essay - need to simplfy.

So I merged the branch back in after renaming the branch
git branch -m oldname newname

and pushed to heroku, but it does not like due to thin error

heroku logs 
was the command I used to figure it out. 

after a bit of dinking around with the gem file (and forgetting to run 
bundle install, I got it to work on Heroku.

I do realize I don't have a link to the home page, so I can't get back except 
with the button, so I need to add that to the navbar and to the tests.

Done.

 Finished up the tech page, decided the help page comes last except I want to 
 
 write a test for it.
  
 Done 
  so I think I
 am ready for the database - I am going to do a complete scaffold and see
 what works and what doesn't from there.  but I will do it in its own branch
 so first I push to github and heroku and check things out on heroku.   
 
 All OK
 
 so started new branch and ran the following
 rails g scaffold   buzzword phrase:string:uniq --no-stylesheets
 result output
  invoke  active_record
      create    db/migrate/20121008004542_create_buzzwords.rb
      create    app/models/buzzword.rb
      invoke    rspec
      create      spec/models/buzzword_spec.rb
      invoke  resource_route
       route    resources :buzzwords
      invoke  scaffold_controller
      create    app/controllers/buzzwords_controller.rb
      invoke    erb
      create      app/views/buzzwords
      create      app/views/buzzwords/index.html.erb
      create      app/views/buzzwords/edit.html.erb
      create      app/views/buzzwords/show.html.erb
      create      app/views/buzzwords/new.html.erb
      create      app/views/buzzwords/_form.html.erb
      invoke    rspec
      create      spec/controllers/buzzwords_controller_spec.rb
      create      spec/views/buzzwords/edit.html.erb_spec.rb
      create      spec/views/buzzwords/index.html.erb_spec.rb
      create      spec/views/buzzwords/new.html.erb_spec.rb
      create      spec/views/buzzwords/show.html.erb_spec.rb
      invoke      helper
      create        spec/helpers/buzzwords_helper_spec.rb
      create      spec/routing/buzzwords_routing_spec.rb
      invoke      rspec
      create        spec/requests/buzzwords_spec.rb
      invoke    helper
      create      app/helpers/buzzwords_helper.rb
      invoke      rspec
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/buzzwords.js.coffee
      invoke    scss
      invoke  scss

 So then I will commit so I can go backwards if needed.

OK, just for grins I run the test suite, which now has 55 tests, up from
25 prior to scaffold gen.   21 fail.   A lot of them fail because I haven't run db:migrate
to create the tables and indexes, so lets do this. 
rake db:migrate
rake db:test:prepare

I think that is all i need to do 

- so I run  the spec again and I get 
all pass except for 3 pending.    One from me - help page, and two from 
the scaffold about spec/helpers/buzzwords_helper_spec and spec/model/buzzword_spec

-but what do I have?   
here are my routes
buzzwords GET    /buzzwords(.:format)          buzzwords#index
              POST   /buzzwords(.:format)          buzzwords#create
 new_buzzword GET    /buzzwords/new(.:format)      buzzwords#new
edit_buzzword GET    /buzzwords/:id/edit(.:format) buzzwords#edit
     buzzword GET    /buzzwords/:id(.:format)      buzzwords#show
              PUT    /buzzwords/:id(.:format)      buzzwords#update
              DELETE /buzzwords/:id(.:format)      buzzwords#destroy
         root        /                             home#home
         home        /home(.:format)               home#home
         tech        /tech(.:format)               tech#tech
         help        /help(.:format)               help#help
 
 And if I navigate to localhost:3003/buzzwords, I get some very ugly looking
 forms and lists that seem to function, except for when I add a duplicate
 phrase (constraint error).   
 
 Still, I think this is a place to start.   The trick will be to recognize the
 cruft in the final stages of this and clean it up.    
 
 First thing I want to do is fix the navbar so I can get there.   Test first.
 
 Done - linked into nav bar via the index.  
 
 Now, what happens if I mess with layout/application  and dump the header in there.
 
 Cool, now I have header info in my scaffold stuff, but double headers in
 my other pages.   So I should remove it from my static pages and move on with some tests.

Done - and committed along with some cruft removal from earlier pages.

Some things I notice right now
1) The show action is worthless since it only shows the same thing.   I should
disable that for now.
2) A nice form for adding multiple buzzwords at the same time would be useful (enhancement)
3) Need to fix error handling for dups in the interface
4) The index page has Listing buzzwords as the title.   UGLY
5) I need to make sure something is not too long, but I don't know what too long is
(can't be wrapped into 3 lines in a bingo cell, but I am not sure what that lenght is yet), so
I will add an arbitary length and fix it later. 
6) Can create a zero lenght buzzword
7) Long words force the actions far to the right
8) I know that bootstrap has some icons/widgits that might prove cute for the maint actions. 
9) the index screen does not paginate
10) I wonder if an edit in place is possible. (enhancement?)

I think we work on the looks stuff first.    

So write a test for the index page that does not have the Show action

OK - we are at the index view test that scaffold generates for me, and I do not 
understand what it is doing.    I think I will write a request spec test and come
back to this one later.   

I have no idea if my editing will break the view test, but so be it.   

so copy the help page spec test and go from there
it "does not have a show link" do
      page.should_not have_link("Show")  
    end 
This tests passes before any change.  But of course there is not show 
link because I have no buzzwords in my test DB!!! time for factory stuff.

but that is tomorrow....

OK found something interesting.   I added this to the top of the spec
let(:buzzword) { FactoryGirl.create(:buzzword, phrase: "Lorem Ipsum") }

and the test passed - since let is a lazy function.      
but let is also a memoized function, which means that it links a symbol to 
a function  result - that means it can act strangely.   And it did.   

Because I am visitng a page that does not refer to the symbol buzzword when it
is generated, I have nothing in the database.   So when I added the test
page.should have_content(buzzword.phrase)  it did not exist.  

The solution was to make the let non lazy by using let! instead.    
Then the should have_content above passes and the test 
page.should_not have_link("Show") fails as expected, since I haven't removed that yet.

So I remove the route by specifing the resource in the route file using only
and I edit the link away in the index page, and remove show.html.erb.

and it passes and item 1 is done

Oops - should have run the entire suite, my controller test fails, 
my routing test fails and my view test fails

remove the view show test, since the view is gone.  
edit away spec/routes that refer to show and the spec/controller that does
the same, and we pass...

Now for a refactor, since the routing file is kind of ugly.   Is there
an anti function for the resources :only?   Yes - :except 
so we didn't break anything with that change  COool!

Skip item 2 for now, and on to error handling for dups
tests first, of course

Detour - I was bugged by pending not showing reason, so I fixed one
example - apparently if you enclose it in an IT block, the reason will show
on the second line 

Fixed in help page.  

OK added a bunch of tests to the index page spec,
then messed around trying to add in icons for edit and delete. 

After a lot of work and false starts, I got the icons next to the phrases
so it is starting to look like something.  I also dropped the list into
a container so that I could do some style things and styled the table a little

However, I want to change the layout so the text for the links goes away, which
will break the tests,   And maybe put the text for the links in the table header


Done  for  edit - and here is how to test for the icons
it "has a method to edit phrases" do
     
     edit_xpath = '//a[@href="' + 
                   edit_buzzword_path(buzzword) + 
                   '"]/i[@class="icon-pencil"]'
   
 
     page.should have_xpath(edit_xpath)
  
we are looking for an html tag "a" with an href of  whatever is
in the var edit_buzzword_path(buzzword) and  within that a tag, there 
is a subtag of i with a class of icon-pencil

similar with delete.   

Now use a new icon and move it to the top

I decided to use a button but this one is not working - routing error.
<%= button_to 'New Buzzword', href: new_buzzword_path, class: "btn btn-primary" %>      

Went around the button_to and now it reads
<%= link_to 'New Buzzword', new_buzzword_path,  class: "btn  btn-primary" %>

The html: parm was messing me up. 

Commit

Now for pagination
need to updated buzzword controller index method from
@buzzwords=Buzzward.all to
  @buzzwords = Buzzword.paginate(page: params[:page], per_page:10)
so that @buzzwords is a paginateable object
and then drop the will_paginate method into the page where I want it.

The will paginate doc says paginate can be put into the model, but that 
seems wrong to me - paginate is a view function, and at best it should be
in controller.   

OK - this broke the scaffold generated view test for index.   
Buzzwords/index renders a list of buzzwords
     Failure/Error: render
     ActionView::Template::Error:
       The @test variable appears to be empty. Did you forget to pass the collection object for will_paginate?
     # ./app/views/buzzwords/index.html.erb:6:in `_app_views_buzzwords_index_html_erb___752583218_90843420'
     # ./spec/views/buzzwords/index.html.erb_spec.rb:16:in `block (2 levels) in <top (required)>'

OK - now it is fixed , but not without a lot of pain.    I needed to pass
a Will_Paginate collection object to the render command, but it needed to be
called @test as  in order to work
properly.   Not sure why on that one.   Learned a little bit about 
stub_model in the meanwhile (kind of like a factory but does not call the 
database, so the view is not dependant on the database.  (See the original 
spec for how it was before the changes for paginate.)).    

So now I have fixed 1,8,9, and labelled # 2, 10 as enhancements for later
So now I have to fix #6 , which means testing the add function

Ok so I figured out after writing a coiuple of test that the add function broke
when I disabled the show in the controller -  because it tries to do a get  
and goes nowhere.   Simplest solution is to add back in the show function 
but perhaps a better solution is to redirect to the edit page on a successfull add. 

Let's try it.   

OK - after a bit of dinking around in the controller, i seem to have fixed it
so that it goes to the edit page - here is the code: 

if @buzzword.save
         
        format.html do
          redirect_to  edit_buzzword_path(@buzzword), notice: 'Buzzword was successfully created.' 
        end
        format.json { render json: @buzzword, status: :created, location: @buzzword }
      else ...
notice that the message is not displayed yet.

I fixed the edit control method as well, since that was going to the show screen as well.

Next step is to fix blank values and style the error message with
the bootstrap classes.   This makes the spec/support/matcher_have_error_message work.

Aside: matcher_have_error_message reacts to any messages, regardless of
severity, even notice - I think _  I might want to fix that, but while my
controller gives a notice, the form handling add and edit doesn't seem to 
react.    see _form partial which reacts to @buzzwords.error (which might
come from DB)

Note - I also not unexpectedly fixed the error for update to blank.

but my controller changes broke the buzzwords controller spec, so I need to lok at that
before commit

ok part failure was that I needed to update the controller spec so
it doesn't do blank phrase anymore

The next part was in the redirects so I fixed the specs 
Add:  no redirect to edit_buzzword_path(1)  instead or @buzzword
Update : from redirect to response.should render_template("edit")

I noticed some error condition testing where I
think I am suppsed to fill in bad data, but I am already testing for
them on the request side so I probably don't need to do the same.

So now I am passing all specs again except pedning of course, 
Now item 3 - duplicates

After adding the test, similar to the blank test
I get one success, since I already have an index built.   But 4 failures 
because the database is handling the failure, not the model.   

So we add uniqueness to the model, and all is happiness and light
in the request test and in the whole set. 

Where do we stand?
1) The show action is worthless since it only shows the same thing.   I should
disable that for now.  DONE
2) A nice form for adding multiple buzzwords at the same time would be useful (enhancement)
3) Need to fix error handling for dups in the interface DONE
4) The index page has Listing buzzwords as the title.   DO NEXT
5) I need to make sure something is not too long, but I don't know what too long is
(can't be wrapped into 3 lines in a bingo cell, but I am not sure what that lenght is yet), so
I will add an arbitary length and fix it later.  PENDING
6) Can create a zero lenght buzzword FIXED
7) Long words force the actions far to the right  WILL BE FIXED WITH LENGTH  Maybe (#5)
8) I know that bootstrap has some icons/widgits that might prove cute for the maint actions. 
DONE
9) the index screen does not paginate DONE
10) I wonder if an edit in place is possible. (enhancement)

Did #4  So now I either kick into printing design mode or into
arbitrary lenght mode.  I do want the length and lines to be a parameter for 
the app, so that I can change it if I go to 
non paper  formats in later releases

Lets try to go to design mode
 So, my printed page cell will be  X characters  by 
Y lines per cell max at smallest font.    Font will unispace to make this
work .    

First question becomes what is the smallest readable monospace font size

c3 schools gives two monospace font families Lucinda looks better
here is the css line I think
"p{font-family: "Lucida Console", Monaco, monospace }
FONT SIZE CALCS
But it is not on Libre office so I think I use the old MONOSPACE
Monospace 8 is smallest = 15 chars per inch
Monospace 9 = 13 char per inch
Monospace 10 = 12.5 char per inch
Monospace 11 = 11.5 char per inch
Monospace 12 = 10 cpi

page width = 7.5 inches 
cells = 5 so cell width is 1.5"
so max char per line = 22 at 8,
Assume 3 lines, so max chars = 66 chars roughly is our max

Design question is: do I try to get fancier with the breaks so something
that formats nicely in 3 lines gets accepted and something 
that does gets rejected?   I think this should come as an enhancement

So I hard code the length as 66  into the spec.
Now have 4 failures as expected 

Fonts : I don't know if that is the same as "Courier New", Courier, monospace,

I think it is Liberation Monospace, but move on...

After adding in lenght validation to the model - and fixing the spec syntax
it passes.   (I even got the phrase on the error message
correct!

 Although I should test max length as well to test boundary
conditions.     DONE and passes

OK everything is passing  so commit and an onward to the update, which 
should have the same tests or nearly so.     So a refactor?

After an attempt. the tests are just differnent enough to keep them separate
for now.

Fixing specs, I figured out how to check the record to see if it is updated
or not 

1) Use factory girl to create an "old" records
  let!(:buzzword_orig)  { FactoryGirl.create(:buzzword, 
                                          phrase: dup_phrase,
                                          updated_at: 10.minutes.ago) } 


2) Test to see if it changes
it "a buzzword is not updated if duplicate" do
                fill_in "Phrase",  with: dup_phrase
                expect { click_button submit }.not_to change{
                 Buzzword.find_by_id(buzzword_orig).updated_at } 
                 
Note that change is in brackets rather than in parens since we are executing
a block of code, not comparing params (which expect .. change will do if the
change is in parenthesis.)   

OK fixed all the update, but lets see if I can fix that ugly looking bracked
in expect with a do - nope error message tells me bad- let it stand
                
OK, now I need to clean up my specs, they are looking a little ragged..

I have been messing around with shared examples -my first pass was a little 
ugly, but I think I have it figured out.    
if I define things with let - they do not get passed to the shared example,
for some reason - and it is really hard to go from a let to a concrete object. 
let definitions seem only to work within describe and it contexts, or something
like that.    They seem elusive. 

So I need to use straight variables, and need to define them at the right level, 
then I can pass them to the shared examples.     

So I created one that defines the tests for an add page error.   The update
page is similar, so I should be able to tweak that, but first let me create
the edit_page_with_error shared example. 

The edit page shared example is the same as the add page shared example except
for two lines, so I can combine them into something called maint_page_with_error 
in a file called maint_page_shared_examples.rb

Worked just fine.  

I have a couple of other things to do with the maint pages:
1) test the pagination
2) Test deletion
3) test and implement alphabetical sorting of the buzzwords
but I think I will do some system maint first.

OK back up and I started to think about pagination - the paginate bar wraps
when I have 12, rather than scrolls or other behaviour - I wonder if I can 
limit that 

Answer - Yes - will_paginate takes a param to show how many  links
at the ends, and how many around the page - default is 2 and 4, which 
causes 12 links, and I only have room for 11 before the next link ends
up wrapping.    So I implemented this:
 <%= will_paginate @buzzwords, outer_window: 1, inner_window: 3 %>
 
 and I also removed the extra button at the end.
 
 So next step is to test pagination.  
 
 Wrote a pagination test for the listing page.   One interesting
 fact is that buzzword_path variable does not go into existance at the
 top level (perhaps visit page creates it) 

Now working on testing the delete from the listing page.   I thought I 
was running into trouble with the confirm dialogue, but it turns out
not to be the case.   I had been testing this with an xpath, since I 
don't have text to find, rather, the delete function is an icon.  One of an 
earlier test was to test if I had an icon for a line so it was set up like this
it "has a method to destroy phrases" do
     destroy_xpath = '//a[@href="' + 
                   buzzword_path(buzzword) + 
                   '"]/i[@class="icon-trash"]'
     page.should have_xpath(destroy_xpath)
  end   

Note that I said this is an ICON so I tried this on the click function

describe "does deletes" do
        let!(:buzz2) { FactoryGirl.create(:buzzword,phrase: "Leave this one") }       
        it "destroys records" do
         destroy_xpath = '//a[@href="' + 
                   Rails.application.routes.url_helpers.buzzword_path(Buzzword.first) + 
                   '"]/i[@class="icon-trash"]' 
                
        page.should have_xpath(destroy_xpath)   
        
        expect{
        find(:xpath, destroy_xpath).click}.to change(Buzzword, :count).by(-1)
       end
  end 

And it was not working.   I thought it was the confirm dialog that 
was causing the problem, so I removed it from the view, but no go.

After hunting around, I saw some hints that said "make sure you have the 
xpath to the <a> attribute,  which was the parent of the icon.   

So I adjusted my xpath to go up one level like this 

destroy_xpath = '//a[@href="' + 
                   Rails.application.routes.url_helpers.buzzword_path(Buzzword.first) + 
                   '"]/i[@class="icon-trash"]/..' 

by adding /.. to the end of the Xpath and viola! we are good, with or 
without the confirm dialog.     (RackTest does not support javascript, so I though that
might screw us up, but it apparently ignores the dialog.

I also figured out what the relationship is between Capybara and Selinium(Something
I have seen in a lot of places but never understood.     Selinium takes the place of
default RackTest and acts as a browser or browser controller and Capybara handles the
testing logic and presents the page to the testing mechanism.    
So capybara and Selinium are cooperators rather than alternatives.  

I am not quite sure yet where the line is, for example click-on seems to
be a capybara method.   whereas switch_to (as in dialog box) is selinim.
some places call selium a web driver.   And selinim is basically the java
script driver.  and it also comes with basic Rails 3... 

OK now I broke something in the controller testing and my spec - the records seem
to be getting messed up.   

It is the thing to figure out next....

For some reason my test db had a record from yesterday.

OK I think I figured out something about what was going on.

1) I did have a record in the test db.   Not sure why - it should have rolled back.  That I think made t
the controller tests fail.  
2) I was not revisiting the listing page after adding the second record.   That caused
failures since the record wasn;t displayed, so I couldn't delete it. 

So I deleted the record manually
then added the before to revisit the page, now all works


Now all test suite 


